import numpy as np
x = np.array(([2,9],[1,5],[3,6]),dtype=float)
print(x)
y = np.array(([92],[86],[89]),dtype = float)

output 
[[2. 9.]
 [1. 5.]
 [3. 6.]]

x = x/np.max(x,axis=0)
y =y/100
print(x)

output
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]


def sigmoid(x):
    return (1/(1+np.exp(-x)))
    
def derivatives_sigmoid(x):
    return x*(1-x)
    
epoch = 1000
lr = 0.01
input_layer_neurons = 2 
hidden_layer_neurons = 2
output_neurons = 1

wh=np.random.uniform(size=(input_layer_neurons,hidden_layer_neurons))
bh = np.random.uniform(size=(1,hidden_layer_neurons))
wout = np.random.uniform(size=(hidden_layer_neurons,output_neurons))
bout = np.random.uniform(size=(1,output_neurons))

for i in range(epoch):
    hinp1 = np.dot(x,wh)
    hinp = hinp1 + bh
    hlayer_act = sigmoid(hinp)
    outinp1 = np.dot(hlayer_act,wout)
    outinp = outinp1 + bout 
    output = sigmoid(outinp)
    EO = (y-output)
    
outgrad = derivatives_sigmoid(output)
d_output = EO*outgrad
EH = d_output.dot(wout.T)
hiddengrad = derivatives_sigmoid(hlayer_act)
d_hiddenlayer = EH*hiddengrad


wout += hlayer_act.T.dot(d_output)*lr
bout += np.sum(d_output,axis=0,keepdims =True)*lr
wh+= x.T.dot(d_hiddenlayer)*lr
bh +=np.sum(d_hiddenlayer,axis=0,keepdims =True)*lr

print("---------Epoch-",i+1,"starts -------------")
print("input:\n"+str(x))
print("Actual output :\n",str(y))
print("predicted output:\n",output)
print("error :\n"+str(EO))
print("--------------Epoch--",i+1,"ends--------\n")
print("Actual output :\n",str(y))
print("predicted output:\n",str(output))
print("error :\n"+str(EO))

output 

---------Epoch- 1000 starts -------------
input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual output :
 [[0.92]
 [0.86]
 [0.89]]
predicted output:
 [[0.84996279]
 [0.8393325 ]
 [0.84800197]]
error :
[[0.07003721]
 [0.0206675 ]
 [0.04199803]]
--------------Epoch-- 1000 ends--------

Actual output :
 [[0.92]
 [0.86]
 [0.89]]
predicted output:
 [[0.84996279]
 [0.8393325 ]
 [0.84800197]]
error :
[[0.07003721]
 [0.0206675 ]
 [0.04199803]]
