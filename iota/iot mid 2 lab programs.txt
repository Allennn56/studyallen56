WEEK 6



#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h" // always include thingspeak header file after other header files and custom macros

char ssid[] = SECRET_SSID;   // your network SSID (name)
char pass[] = SECRET_PASS;   // your network password
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;

unsigned long myChannelNumber = 2103672;
const char * myWriteAPIKey = "PXVDZESPCBS41FV6";

int number = 0;
const int irPin = D5;

void setup() {
  Serial.begin(115200);  // Initialize serial
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo native USB port only
  }
 
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);  // Initialize ThingSpeak
}

void loop() {

  // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);    
    }
    Serial.println("\nConnected.");
  }
 
  // Write to ThingSpeak. There are up to 8 fields in a channel, allowing you to store up to 8 different
  // pieces of information in a channel.  Here, we write to field 1.
  int x = ThingSpeak.writeField(myChannelNumber, 1, number, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }

  // change the value
  number++;
  if(number > 99){
    number = 0;
  }
 
  delay(20000); // Wait 20 seconds to update the channel again
}



WEEK 7



#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h"
#include "DHT.h"
#define DHTTYPE DHT11
#define DHTPIN_D3
DHT dht(D3, DHT11);

char ssid[] = SECRET_SSID;  
char pass[] = SECRET_PASS;  
int keyIndex = 0;            
WiFiClient  client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

// Initialize our values
int number1 = 0;
int number2 = random(0,100);
int number3 = random(0,100);
int number4 = random(0,100);
String myStatus = "";

void setup() {
  Serial.begin(115200);  
  while (!Serial) {
    ;
  }
 
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);
}

void loop() {

  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);
      Serial.print(".");
      delay(5000);    
    }
    Serial.println("\nConnected.");
  }

  // set the fields with the values
  ThingSpeak.setField(1, number1);
  ThingSpeak.setField(2, number2);
  ThingSpeak.setField(3, number3);
  ThingSpeak.setField(4, number4);

  if(number1 > number2){
    myStatus = String("field1 is greater than field2");
  }
  else if(number1 < number2){
    myStatus = String("field1 is less than field2");
  }
  else{
    myStatus = String("field1 equals field2");
  }

  ThingSpeak.setStatus(myStatus);

  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
 
  number1++;
  if(number1 > 99){
    number1 = 0;
  }
  number2 = random(0,100);
  number3 = random(0,100);
  number4 = random(0,100);
 
  delay(5000);
}

WEEK 8



#include "ThingSpeak.h"
#include <ESP8266WiFi.h>
const char ssid[] = "Rinku"; // your network SSID (name)
const char pass[] = "sai12345"; // your network password
int statusCode = 0;
WiFiClient client;
//---------Channel Details---------//
unsigned long counterChannelNumber = 2103684; // Channel ID
const char * myCounterReadAPIKey = "76IKZGQ5ZJJWZCM2"; // Read API Key
const int FieldNumber1 = 1; // The field you wish to read
const int FieldNumber2 = 2; // The field you wish to read
//-------------------------------//
void setup()
{
Serial.begin(115200);
WiFi.mode(WIFI_STA);
ThingSpeak.begin(client);
}
void loop()
{
//----------------- Network -----------------//
if (WiFi.status() != WL_CONNECTED)
{
Serial.print("Connecting to ");
Serial.print(ssid);
Serial.println(" ....");
while (WiFi.status() != WL_CONNECTED)
{
WiFi.begin(ssid, pass);
delay(5000);
}
Serial.println("Connected to Wi-Fi Succesfully.");
}
//--------- End of Network connection--------//
//---------------- Channel 1 ----------------//
long temp = ThingSpeak.readLongField(counterChannelNumber, FieldNumber1,
myCounterReadAPIKey);
statusCode = ThingSpeak.getLastReadStatus();
if (statusCode == 200)
{
Serial.print("Temperature: ");
Serial.println(temp);
}
else
{
Serial.println("Unable to read channel / No internet connection");
}
delay(100);
//-------------- End of Channel 1 -------------//

//---------------- Channel 2 ----------------//
long humidity = ThingSpeak.readLongField(counterChannelNumber, FieldNumber2,
myCounterReadAPIKey);
statusCode = ThingSpeak.getLastReadStatus();
if (statusCode == 200)
{
Serial.print("Humidity: ");
Serial.println(humidity);
}
else
{
Serial.println("Unable to read channel / No internet connection");
}
delay(100);
//-------------- End of Channel 2 -------------//
}

WEEK 8


#include "ThingSpeak.h"
#include <ESP8266WiFi.h>
const char ssid[] = "Rinku"; // your network SSID (name)
const char pass[] = "sai12345"; // your network password
int statusCode = 0;
WiFiClient client;
//---------Channel Details---------//
unsigned long counterChannelNumber = 2103684; // Channel ID
const char * myCounterReadAPIKey = "76IKZGQ5ZJJWZCM2"; // Read API Key
const int FieldNumber1 = 1; // The field you wish to read
const int FieldNumber2 = 2; // The field you wish to read
//-------------------------------//
void setup()
{
Serial.begin(115200);
WiFi.mode(WIFI_STA);
ThingSpeak.begin(client);
}
void loop()
{
//----------------- Network -----------------//
if (WiFi.status() != WL_CONNECTED)
{
Serial.print("Connecting to ");
Serial.print(ssid);
Serial.println(" ....");
while (WiFi.status() != WL_CONNECTED)
{
WiFi.begin(ssid, pass);
delay(5000);
}
Serial.println("Connected to Wi-Fi Succesfully.");
}
//--------- End of Network connection--------//
//---------------- Channel 1 ----------------//
long temp = ThingSpeak.readLongField(counterChannelNumber, FieldNumber1,
myCounterReadAPIKey);
statusCode = ThingSpeak.getLastReadStatus();
if (statusCode == 200)
{
Serial.print("Temperature: ");
Serial.println(temp);
}
else
{
Serial.println("Unable to read channel / No internet connection");
}
delay(100);
//-------------- End of Channel 1 -------------//

//---------------- Channel 2 ----------------//
long humidity = ThingSpeak.readLongField(counterChannelNumber, FieldNumber2,
myCounterReadAPIKey);
statusCode = ThingSpeak.getLastReadStatus();
if (statusCode == 200)
{
Serial.print("Humidity: ");
Serial.println(humidity);
}
else
{
Serial.println("Unable to read channel / No internet connection");
}
delay(100);
//-------------- End of Channel 2 -------------//
}

WEEK 9



#include &quot;ESP8266WiFi.h&quot;
#include &quot;DHT.h&quot;
#define DHTTYPE DHT11
const char* ssid = &quot;Redmi Note 11 Pro+ 5G&quot;;
const char* password = &quot;mani@123&quot;;
WiFiServer wifiServer(9000);
DHT dht(D4, DHT11);
void setup() {
Serial.begin(115200);
delay(1000);
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(1000);
Serial.println(&quot;Connecting..&quot;);
}
Serial.print(&quot;Connected to WiFi. IP:&quot;);
Serial.println(WiFi.localIP());
wifiServer.begin();
dht.begin();

}

void loop() {
WiFiClient client = wifiServer.available();
if (client) {
while (client.connected()) {
while (client.available()&gt;0) {
int h = dht.readHumidity();
client.print(&quot;humidity :&quot;);
client.println(h);
//Serial.println(sensor_value);
delay(2000);
}
}
client.stop();
Serial.println(&quot;Client disconnected&quot;);
}
}




week 10


#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include "DHT.h"
#define DHTTYPE DHT11
#define WIFI_SSID "lab"
#define WIFI_PASS "12345678"
#define UDP_PORT 4210
DHT dht(D5, DHT11);

WiFiUDP UDP;
char packet[255];
char reply[] = "Packet received!";

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println(F("DHTxx test!"));
  dht.begin();

  WiFi.begin(WIFI_SSID, WIFI_PASS);

  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);

  while(WiFi.status()!=WL_CONNECTED)
  {
    delay(2000);
    Serial.print(".");
  }
 

  Serial.println();
  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());


  UDP.begin(UDP_PORT);
  Serial.print("Listening on UDP port ");
  Serial.println(UDP_PORT);
}

void loop() {
  int h = dht.readHumidity();
  int t = dht.readTemperature();
  delay(2000);
  UDP.beginPacket(UDP.remoteIP(), UDP.remotePort());
  UDP.write(reply);
  UDP.endPacket();
  UDP.println(t);
  UDP.println(h);
  Serial.println(F("Humidity:\n "));
  Serial.println(h);

}
